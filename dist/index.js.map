{"version":3,"sources":["../src/logger/emitter.ts","../src/types/log_threshold.ts","../src/logger/level_priority.ts","../src/logger/log_with_level.ts","../src/logger/log_with_color.ts"],"sourcesContent":["import type { ConsoleMethod } from \"../types/console_method.js\";\nimport type { LogLevel } from \"../types/log_level.js\";\n\n/**\n * Maps each log level to the corresponding console method.\n * Used internally to dispatch messages to the correct output function.\n */\nexport const consoleMethods: Record<LogLevel, ConsoleMethod> = {\n\tdebug: \"log\",\n\tinfo: \"info\",\n\twarn: \"warn\",\n\terror: \"error\",\n};\n\n/**\n * Emits a log message to the appropriate console method.\n * Assumes message is already formatted and ready to print.\n *\n * @param level - The log level of the message (e.g. \"warn\", \"error\")\n * @param message - The final string to output (includes prefix, colors, etc.)\n */\nexport function emitLog(level: LogLevel, message: string): void {\n\tconst method = consoleMethods[level];\n\tconsole[method](message);\n}\n","export const logThresholds = [\n\t\"debug\",\n\t\"info\",\n\t\"warn\",\n\t\"error\",\n\t\"silent\",\n] as const;\nexport type LogThreshold = (typeof logThresholds)[number];\n","import type { LogLevel } from \"../types/log_level.js\";\nimport { type LogThreshold, logThresholds } from \"../types/log_threshold.js\";\n\n/**\n * Assigns a numeric priority to each log threshold level.\n * Lower numbers mean more verbose; higher means more critical.\n * \"silent\" is given a very high value (999) to suppress all output.\n */\nexport const levelPriority: Record<LogThreshold, number> = Object.fromEntries(\n\tlogThresholds.map((level, index) =>\n\t\tlevel === \"silent\" ? [level, 999] : [level, index],\n\t),\n) as Record<LogThreshold, number>;\n\n/**\n * Determines whether a message with the given `level` should be logged\n * based on the user-defined `threshold`.\n *\n * @param threshold - The minimum log level required to allow output\n * @param level - The log level of the current message\n * @returns `true` if the message should be printed, `false` otherwise\n */\nexport function shouldLog(threshold: LogThreshold, level: LogLevel): boolean {\n\treturn levelPriority[level] >= levelPriority[threshold];\n}\n","import type { LogLevel } from \"../types/log_level.js\";\nimport type { LogThreshold } from \"../types/log_threshold.js\";\nimport { emitLog } from \"./emitter.js\";\nimport { shouldLog } from \"./level_priority.js\";\n\n/**\n * Logs a plain message with a `[LEVEL]` prefix (no colors).\n *\n * Emits the message only if the `level` is equal to or more severe than `threshold`.\n * The message is formatted by joining all `args` with spaces.\n *\n * @param threshold - Minimum log level required to allow output\n * @param level - Severity level of this specific message\n * @param args - One or more values to print (same as `console.log`)\n */\nexport function logWithLevel(\n\tthreshold: LogThreshold,\n\tlevel: LogLevel,\n\t...args: unknown[]\n): void {\n\tif (!shouldLog(threshold, level)) return;\n\n\tconst prefix = `[${level.toUpperCase()}]`;\n\tconst msg = [prefix, ...args].map(String).join(\" \");\n\temitLog(level, msg);\n}\n","import type { LogLevel } from \"../types/log_level.js\";\nimport { emitLog } from \"./emitter.js\";\nimport { shouldLog } from \"./level_priority.js\";\n\nconst RESET = \"\\x1b[0m\";\n\n/**\n * ANSI color codes mapped to log levels for terminal output.\n * These control how the log prefix is rendered in supported terminals.\n */\nconst levelColor: Record<LogLevel, string> = {\n\tdebug: \"\\x1b[90m\", // gray\n\tinfo: \"\\x1b[36m\", // cyan\n\twarn: \"\\x1b[33m\", // yellow/orange\n\terror: \"\\x1b[31m\", // red\n};\n\n/**\n * Logs a message with colorized `[LEVEL]` prefix using ANSI codes.\n *\n * Emits the message only if the `level` meets or exceeds the configured `threshold`.\n * Color is applied to the prefix and message body, then reset after the line.\n *\n * @param threshold - Minimum log level required to allow printing\n * @param level - Severity level of this message\n * @param args - Message content (anything `console.log` would accept)\n */\nexport function logWithColor(\n\tthreshold: LogLevel,\n\tlevel: LogLevel,\n\t...args: unknown[]\n): void {\n\tif (!shouldLog(threshold, level)) return;\n\n\tconst color = levelColor[level];\n\tconst prefix = `[${level.toUpperCase()}]`;\n\tconst body = args.map(String).join(\" \");\n\tconst colored = `${color}${prefix} ${body}${RESET}`;\n\temitLog(level, colored);\n}\n"],"mappings":";AAOO,IAAM,iBAAkD;AAAA,EAC9D,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AACR;AASO,SAAS,QAAQ,OAAiB,SAAuB;AAC/D,QAAM,SAAS,eAAe,KAAK;AACnC,UAAQ,MAAM,EAAE,OAAO;AACxB;;;ACxBO,IAAM,gBAAgB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;;;ACEO,IAAM,gBAA8C,OAAO;AAAA,EACjE,cAAc;AAAA,IAAI,CAAC,OAAO,UACzB,UAAU,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,KAAK;AAAA,EAClD;AACD;AAUO,SAAS,UAAU,WAAyB,OAA0B;AAC5E,SAAO,cAAc,KAAK,KAAK,cAAc,SAAS;AACvD;;;ACTO,SAAS,aACf,WACA,UACG,MACI;AACP,MAAI,CAAC,UAAU,WAAW,KAAK,EAAG;AAElC,QAAM,SAAS,IAAI,MAAM,YAAY,CAAC;AACtC,QAAM,MAAM,CAAC,QAAQ,GAAG,IAAI,EAAE,IAAI,MAAM,EAAE,KAAK,GAAG;AAClD,UAAQ,OAAO,GAAG;AACnB;;;ACrBA,IAAM,QAAQ;AAMd,IAAM,aAAuC;AAAA,EAC5C,OAAO;AAAA;AAAA,EACP,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,OAAO;AAAA;AACR;AAYO,SAAS,aACf,WACA,UACG,MACI;AACP,MAAI,CAAC,UAAU,WAAW,KAAK,EAAG;AAElC,QAAM,QAAQ,WAAW,KAAK;AAC9B,QAAM,SAAS,IAAI,MAAM,YAAY,CAAC;AACtC,QAAM,OAAO,KAAK,IAAI,MAAM,EAAE,KAAK,GAAG;AACtC,QAAM,UAAU,GAAG,KAAK,GAAG,MAAM,IAAI,IAAI,GAAG,KAAK;AACjD,UAAQ,OAAO,OAAO;AACvB;","names":[]}